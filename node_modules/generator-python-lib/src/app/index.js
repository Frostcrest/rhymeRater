'use strict';

const Generator = require(`yeoman-generator`);
const validators = require(`./validators`);

module.exports = class extends Generator {
  constructor(args, opts) {
    super(args, opts);

    this.option(`projectName`,
      {
        defaults: this.config.get(`projectName`),
        desc: `Name of your project.`,
        type: String,
      });

    this.option(
      `fullName`,
      {
        defaults: this.config.get(`fullName`),
        desc: `Your full name.`,
        type: String,
      }
    );

    this.option(`email`,
      {
        defaults: this.config.get(`email`),
        desc: `Your e-mail address.`,
        type: String,
      });

    this.option(`gitlabName`,
      {
        defaults: this.config.get(`gitlabName`),
        desc: `Your GitLab username.`,
        type: String,
      });

    this.option(`ciProvider`,
      {
        defaults: this.config.get(`ciProvider`) || 0,
        desc: `CI Provider.`,
        type: Number,
      });
  }

  initializing() {
    this.pkg = require(`../../package.json`);

    const updateNotifier = require(`update-notifier`);

    updateNotifier({pkg: this.pkg}).notify();
  }

  prompting() {
    if (!this.options[`skip-welcome-message`]) {
      this.log(require(`yosay`)(
        `Welcome to the python library generator!`
      ));
    }

    const prompts = [
      {
        default: this.options.projectName,
        message: `Name of your project`,
        name: `projectName`,
        type: `input`,
        validate: validators.validateProjectName,
      },
      {
        default: this.options.fullName,
        message: `Your full name`,
        name: `fullName`,
        type: `input`,
        validate: validators.validateFullName,
      },
      {
        default: this.options.email,
        message: `Your e-mail address`,
        name: `email`,
        type: `input`,
        validate: validators.validateEmail,
      },
      {
        default: this.options.gitlabName,
        message: `Your GitLab username`,
        name: `gitlabName`,
        type: `input`,
        validate: validators.validateGitLabName,
      },
      {
        default: this.options.ciProvider,
        choices: require(`./ci-providers`),
        message: `Your CI provider`,
        name: `ciProvider`,
        type: `list`,
        validate: validators.validateCIProvider,
      },
    ];

    return this.prompt(prompts).then(answers => {
      this.projectName = answers.projectName;
      this.config.set(`projectName`, this.projectName);

      this.fullName = answers.fullName;
      this.config.set(`fullName`, this.fullName);

      this.email = answers.email;
      this.config.set(`email`, this.email);

      this.gitlabName = answers.gitlabName;
      this.config.set(`gitlabName`, this.gitlabName);

      this.ciProvider = answers.ciProvider;
      this.config.set(`ciProvider`, this.ciProvider);
    });
  }

  writing() {
    this.composeWith(require.resolve(`generator-license`), {
      name: this.fullName,
      email: this.email,
    });

    this.fs.copyTpl(
      this.templatePath(`coveragerc`),
      this.destinationPath(`.coveragerc`),
      {
        projectName: this.projectName,
      }
    );
    this.fs.copy(
      this.templatePath(`pylintrc`),
      this.destinationPath(`.pylintrc`)
    );
    this.fs.copy(
      this.templatePath(`_requirements-dev.txt`),
      this.destinationPath(`requirements-dev.txt`)
    );
    this.fs.copy(
      this.templatePath(`_requirements.txt`),
      this.destinationPath(`requirements.txt`)
    );
    this.fs.copyTpl(
      this.templatePath(`_setup.py`),
      this.destinationPath(`setup.py`),
      {
        email: this.email,
        fullName: this.fullName,
        projectName: this.projectName,
      }
    );
    this.fs.copyTpl(
      this.templatePath(`_tox.ini`),
      this.destinationPath(`tox.ini`),
      {
        projectName: this.projectName,
      }
    );

    if (this.ciProvider === `Travis CI`) {
      this.fs.copy(
        this.templatePath(`travis.yml`),
        this.destinationPath(`.travis.yml`)
      );
    }

    this.fs.copy(
      this.templatePath(`gitattributes`),
      this.destinationPath(`.gitattributes`)
    );
    this.fs.copy(
      this.templatePath(`gitignore`),
      this.destinationPath(`.gitignore`)
    );

    const path = require(`path`);

    this.fs.write(
      this.destinationPath(this.projectName + `/__init__.py`),
      ``
    );
    this.fs.copy(
      this.templatePath(`pkg/_utils.py`),
      this.destinationPath(path.join(this.projectName, `utils.py`))
    );
    this.fs.copyTpl(
      this.templatePath(`tests/_test_utils.py`),
      this.destinationPath(`tests/test_utils.py`),
      {
        projectName: this.projectName,
      }
    );

    this.fs.copyTpl(
      this.templatePath(`_CONTRIBUTING.md`),
      this.destinationPath(`CONTRIBUTING.md`),
      {
        gitlabName: this.gitlabName,
        projectName: this.projectName,
      }
    );
    this.fs.copyTpl(
      this.templatePath(`_README.md`),
      this.destinationPath(`README.md`),
      {
        ciProvider: this.ciProvider,
        fullName: this.fullName,
        gitlabName: this.gitlabName,
        projectName: this.projectName,
      }
    );

    this.fs.write(
      this.destinationPath(`tests/__init__.py`),
      ``
    );

    this.config.set(`version`, this.pkg.version);
  }
};
